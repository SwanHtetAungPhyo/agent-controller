#!/bin/bash

# Kainos Kubernetes Management Script
# Usage: ./k8s/kainos [command]

set -e

NAMESPACE="kainos"
CONTEXT="kind-kainos-cluster"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# Check if kubectl is available
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed or not in PATH"
        exit 1
    fi
}

# Check if kind cluster exists
check_cluster() {
    if ! kubectl cluster-info --context $CONTEXT &> /dev/null; then
        log_error "Kind cluster '$CONTEXT' is not running"
        log_info "Run: kind create cluster --name kainos-cluster"
        exit 1
    fi
}

# Build and load Docker images
build_images() {
    log_info "Building Docker images..."
    
    log_info "Building core-service..."
    docker build -t core-service:latest ./core
    
    log_info "Building email-service..."
    docker build -t email-service:latest ./email
    
    log_info "Loading images into kind cluster..."
    kind load docker-image core-service:latest --name kainos-cluster
    kind load docker-image email-service:latest --name kainos-cluster
    
    log_success "Images built and loaded successfully"
}

# Deploy infrastructure
deploy_infra() {
    log_info "Deploying infrastructure services..."
    kubectl apply -f k8s/infrastructure.yaml
    log_success "Infrastructure deployed"
}

# Deploy applications
deploy_apps() {
    log_info "Deploying application services..."
    kubectl apply -f k8s/app.yaml
    log_success "Applications deployed"
}

# Full deployment
deploy() {
    check_kubectl
    check_cluster
    build_images
    deploy_infra
    deploy_apps
    
    log_info "Waiting for deployments to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/postgres -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/redis -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/nats -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/temporal -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/core-api -n $NAMESPACE
    
    log_success "Deployment completed!"
    status
}

# Show status
status() {
    log_info "Kainos Application Status"
    echo "=========================="
    kubectl get pods -n $NAMESPACE
    echo ""
    kubectl get services -n $NAMESPACE
}

# Show logs
logs() {
    local service=${1:-"core-api"}
    log_info "Following logs for $service..."
    kubectl logs -f deployment/$service -n $NAMESPACE --timestamps=true
}

# Clean up
cleanup() {
    log_warning "Cleaning up Kainos deployment..."
    kubectl delete namespace $NAMESPACE --ignore-not-found=true
    log_success "Cleanup completed"
}

# Port forward services
port_forward() {
    local service=${1:-"core-api"}
    case $service in
        "core"|"core-api")
            log_info "Port forwarding Core API to localhost:8081"
            log_info "Press Ctrl+C to stop port forwarding"
            log_info "Test with: curl http://localhost:8081/healthz"
            kubectl port-forward service/core-api 8081:80 -n $NAMESPACE
            ;;
        "nats")
            log_info "Port forwarding NATS monitoring to localhost:8222"
            log_info "Press Ctrl+C to stop port forwarding"
            log_info "Visit: http://localhost:8222"
            kubectl port-forward service/nats 8222:8222 -n $NAMESPACE
            ;;
        "postgres")
            log_info "Port forwarding PostgreSQL to localhost:5432"
            log_info "Press Ctrl+C to stop port forwarding"
            log_info "Connect with: psql -h localhost -p 5432 -U kainos -d kainos"
            kubectl port-forward service/postgres 5432:5432 -n $NAMESPACE
            ;;
        "redis")
            log_info "Port forwarding Redis to localhost:6379"
            log_info "Press Ctrl+C to stop port forwarding"
            log_info "Connect with: redis-cli -h localhost -p 6379 -a redispass"
            kubectl port-forward service/redis 6379:6379 -n $NAMESPACE
            ;;
        "temporal")
            log_info "Port forwarding Temporal to localhost:7233"
            log_info "Press Ctrl+C to stop port forwarding"
            kubectl port-forward service/temporal 7233:7233 -n $NAMESPACE
            ;;
        *)
            log_error "Unknown service: $service"
            log_info "Available services: core, nats, postgres, redis, temporal"
            exit 1
            ;;
    esac
}

# Health check
health() {
    log_info "Checking application health..."
    
    # Check if core API is accessible
    if kubectl port-forward service/core-api 8081:80 -n $NAMESPACE &> /dev/null &
    then
        local PF_PID=$!
        sleep 2
        if curl -s http://localhost:8081/healthz &> /dev/null; then
            log_success "Core API is healthy"
        else
            log_warning "Core API health check failed"
        fi
        kill $PF_PID 2>/dev/null || true
    fi
}

# Show help
help() {
    echo "Kainos Kubernetes Management Script"
    echo ""
    echo "Usage: ./k8s/kainos [command]"
    echo ""
    echo "Commands:"
    echo "  deploy          - Full deployment (build images + deploy infrastructure + apps)"
    echo "  build           - Build and load Docker images"
    echo "  infra           - Deploy infrastructure services only"
    echo "  apps            - Deploy application services only"
    echo "  status          - Show deployment status"
    echo "  logs [service]  - Follow logs for a service (default: core-api)"
    echo "  port [service]  - Port forward a service (default: core-api)"
    echo "  health          - Check application health"
    echo "  cleanup         - Remove all deployments"
    echo "  help            - Show this help"
    echo ""
    echo "Examples:"
    echo "  ./k8s/kainos deploy"
    echo "  ./k8s/kainos logs core-api"
    echo "  ./k8s/kainos port nats"
    echo "  ./k8s/kainos status"
}

# Main command handling
case "${1:-help}" in
    "deploy")
        deploy
        ;;
    "build")
        check_kubectl
        check_cluster
        build_images
        ;;
    "infra")
        check_kubectl
        check_cluster
        deploy_infra
        ;;
    "apps")
        check_kubectl
        check_cluster
        deploy_apps
        ;;
    "status")
        check_kubectl
        check_cluster
        status
        ;;
    "logs")
        check_kubectl
        check_cluster
        logs $2
        ;;
    "port")
        check_kubectl
        check_cluster
        port_forward $2
        ;;
    "health")
        check_kubectl
        check_cluster
        health
        ;;
    "cleanup")
        check_kubectl
        cleanup
        ;;
    "help"|*)
        help
        ;;
esac