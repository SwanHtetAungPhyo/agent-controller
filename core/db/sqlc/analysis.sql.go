// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analysis.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSystemAnalysis = `-- name: CreateSystemAnalysis :one
INSERT INTO system_defined_analysis (id, analysis_type, description) VALUES ($1,$2, $3) returning id, analysis_type, description
`

type CreateSystemAnalysisParams struct {
	ID           uuid.UUID `json:"id"`
	AnalysisType *string   `json:"analysis_type"`
	Description  *string   `json:"description"`
}

func (q *Queries) CreateSystemAnalysis(ctx context.Context, arg CreateSystemAnalysisParams) (SystemDefinedAnalysis, error) {
	row := q.db.QueryRow(ctx, createSystemAnalysis, arg.ID, arg.AnalysisType, arg.Description)
	var i SystemDefinedAnalysis
	err := row.Scan(&i.ID, &i.AnalysisType, &i.Description)
	return i, err
}

const createUserAnalysis = `-- name: CreateUserAnalysis :one
INSERT INTO kainos_user_analysis (id, description, s3_url, customer_id) VALUES ($1,$2, $3, $4) returning id, description, s3_url, customer_id, created_at
`

type CreateUserAnalysisParams struct {
	ID          uuid.UUID `json:"id"`
	Description *string   `json:"description"`
	S3Url       *string   `json:"s3_url"`
	CustomerID  uuid.UUID `json:"customer_id"`
}

func (q *Queries) CreateUserAnalysis(ctx context.Context, arg CreateUserAnalysisParams) (KainosUserAnalysis, error) {
	row := q.db.QueryRow(ctx, createUserAnalysis,
		arg.ID,
		arg.Description,
		arg.S3Url,
		arg.CustomerID,
	)
	var i KainosUserAnalysis
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.S3Url,
		&i.CustomerID,
		&i.CreatedAt,
	)
	return i, err
}

const getSystemAnalysis = `-- name: GetSystemAnalysis :many
SELECT id, analysis_type, description from system_defined_analysis
`

func (q *Queries) GetSystemAnalysis(ctx context.Context) ([]SystemDefinedAnalysis, error) {
	rows, err := q.db.Query(ctx, getSystemAnalysis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemDefinedAnalysis{}
	for rows.Next() {
		var i SystemDefinedAnalysis
		if err := rows.Scan(&i.ID, &i.AnalysisType, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAnalysis = `-- name: GetUserAnalysis :many
SELECT kainos_user_analysis.id, description, s3_url,kainos_user_analysis.created_at
    from kainos_user_analysis
    join kainos_user
    on kainos_user_analysis.customer_id = kainos_user.id
`

type GetUserAnalysisRow struct {
	ID          uuid.UUID        `json:"id"`
	Description *string          `json:"description"`
	S3Url       *string          `json:"s3_url"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetUserAnalysis(ctx context.Context) ([]GetUserAnalysisRow, error) {
	rows, err := q.db.Query(ctx, getUserAnalysis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserAnalysisRow{}
	for rows.Next() {
		var i GetUserAnalysisRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.S3Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
