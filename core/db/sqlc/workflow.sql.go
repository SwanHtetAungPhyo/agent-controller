// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workflows.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUserWorkflowSchedules = `-- name: CountUserWorkflowSchedules :one
SELECT COUNT(*) FROM workflows_schedules
WHERE related_to = $1
`

func (q *Queries) CountUserWorkflowSchedules(ctx context.Context, relatedTo *string) (int64, error) {
	row := q.db.QueryRow(ctx, countUserWorkflowSchedules, relatedTo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWorkflowSchedule = `-- name: CreateWorkflowSchedule :one
INSERT INTO workflows_schedules (
    id,
    related_to,
    workflow_type,
    schedule_id,
    created_at
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, related_to, workflow_type, schedule_id, created_at
`

type CreateWorkflowScheduleParams struct {
	ID           uuid.UUID        `json:"id"`
	RelatedTo    *string          `json:"related_to"`
	WorkflowType string           `json:"workflow_type"`
	ScheduleID   string           `json:"schedule_id"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateWorkflowSchedule(ctx context.Context, arg CreateWorkflowScheduleParams) (WorkflowsSchedule, error) {
	row := q.db.QueryRow(ctx, createWorkflowSchedule,
		arg.ID,
		arg.RelatedTo,
		arg.WorkflowType,
		arg.ScheduleID,
		arg.CreatedAt,
	)
	var i WorkflowsSchedule
	err := row.Scan(
		&i.ID,
		&i.RelatedTo,
		&i.WorkflowType,
		&i.ScheduleID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserWorkflowScheduleByType = `-- name: DeleteUserWorkflowScheduleByType :exec
DELETE FROM workflows_schedules
WHERE related_to = $1 AND workflow_type = $2
`

type DeleteUserWorkflowScheduleByTypeParams struct {
	RelatedTo    *string `json:"related_to"`
	WorkflowType string  `json:"workflow_type"`
}

func (q *Queries) DeleteUserWorkflowScheduleByType(ctx context.Context, arg DeleteUserWorkflowScheduleByTypeParams) error {
	_, err := q.db.Exec(ctx, deleteUserWorkflowScheduleByType, arg.RelatedTo, arg.WorkflowType)
	return err
}

const deleteUserWorkflowSchedules = `-- name: DeleteUserWorkflowSchedules :exec
DELETE FROM workflows_schedules
WHERE related_to = $1
`

func (q *Queries) DeleteUserWorkflowSchedules(ctx context.Context, relatedTo *string) error {
	_, err := q.db.Exec(ctx, deleteUserWorkflowSchedules, relatedTo)
	return err
}

const deleteWorkflowSchedule = `-- name: DeleteWorkflowSchedule :exec
DELETE FROM workflows_schedules
WHERE id = $1
`

func (q *Queries) DeleteWorkflowSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkflowSchedule, id)
	return err
}

const deleteWorkflowScheduleByScheduleID = `-- name: DeleteWorkflowScheduleByScheduleID :exec
DELETE FROM workflows_schedules
WHERE schedule_id = $1
`

func (q *Queries) DeleteWorkflowScheduleByScheduleID(ctx context.Context, scheduleID string) error {
	_, err := q.db.Exec(ctx, deleteWorkflowScheduleByScheduleID, scheduleID)
	return err
}

const getUserWorkflowSchedule = `-- name: GetUserWorkflowSchedule :one
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
WHERE related_to = $1 AND workflow_type = $2
LIMIT 1
`

type GetUserWorkflowScheduleParams struct {
	RelatedTo    *string `json:"related_to"`
	WorkflowType string  `json:"workflow_type"`
}

func (q *Queries) GetUserWorkflowSchedule(ctx context.Context, arg GetUserWorkflowScheduleParams) (WorkflowsSchedule, error) {
	row := q.db.QueryRow(ctx, getUserWorkflowSchedule, arg.RelatedTo, arg.WorkflowType)
	var i WorkflowsSchedule
	err := row.Scan(
		&i.ID,
		&i.RelatedTo,
		&i.WorkflowType,
		&i.ScheduleID,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkflowSchedule = `-- name: GetWorkflowSchedule :one
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorkflowSchedule(ctx context.Context, id uuid.UUID) (WorkflowsSchedule, error) {
	row := q.db.QueryRow(ctx, getWorkflowSchedule, id)
	var i WorkflowsSchedule
	err := row.Scan(
		&i.ID,
		&i.RelatedTo,
		&i.WorkflowType,
		&i.ScheduleID,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkflowScheduleByScheduleID = `-- name: GetWorkflowScheduleByScheduleID :one
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
WHERE schedule_id = $1 LIMIT 1
`

func (q *Queries) GetWorkflowScheduleByScheduleID(ctx context.Context, scheduleID string) (WorkflowsSchedule, error) {
	row := q.db.QueryRow(ctx, getWorkflowScheduleByScheduleID, scheduleID)
	var i WorkflowsSchedule
	err := row.Scan(
		&i.ID,
		&i.RelatedTo,
		&i.WorkflowType,
		&i.ScheduleID,
		&i.CreatedAt,
	)
	return i, err
}

const listAllWorkflowSchedules = `-- name: ListAllWorkflowSchedules :many
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
ORDER BY created_at DESC
`

func (q *Queries) ListAllWorkflowSchedules(ctx context.Context) ([]WorkflowsSchedule, error) {
	rows, err := q.db.Query(ctx, listAllWorkflowSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowsSchedule{}
	for rows.Next() {
		var i WorkflowsSchedule
		if err := rows.Scan(
			&i.ID,
			&i.RelatedTo,
			&i.WorkflowType,
			&i.ScheduleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowSchedulesByUser = `-- name: ListWorkflowSchedulesByUser :many
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
WHERE related_to = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflowSchedulesByUser(ctx context.Context, relatedTo *string) ([]WorkflowsSchedule, error) {
	rows, err := q.db.Query(ctx, listWorkflowSchedulesByUser, relatedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowsSchedule{}
	for rows.Next() {
		var i WorkflowsSchedule
		if err := rows.Scan(
			&i.ID,
			&i.RelatedTo,
			&i.WorkflowType,
			&i.ScheduleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowSchedulesByUserAndType = `-- name: ListWorkflowSchedulesByUserAndType :many
SELECT id, related_to, workflow_type, schedule_id, created_at FROM workflows_schedules
WHERE related_to = $1 AND workflow_type = $2
ORDER BY created_at DESC
`

type ListWorkflowSchedulesByUserAndTypeParams struct {
	RelatedTo    *string `json:"related_to"`
	WorkflowType string  `json:"workflow_type"`
}

func (q *Queries) ListWorkflowSchedulesByUserAndType(ctx context.Context, arg ListWorkflowSchedulesByUserAndTypeParams) ([]WorkflowsSchedule, error) {
	rows, err := q.db.Query(ctx, listWorkflowSchedulesByUserAndType, arg.RelatedTo, arg.WorkflowType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkflowsSchedule{}
	for rows.Next() {
		var i WorkflowsSchedule
		if err := rows.Scan(
			&i.ID,
			&i.RelatedTo,
			&i.WorkflowType,
			&i.ScheduleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflowSchedule = `-- name: UpdateWorkflowSchedule :one
UPDATE workflows_schedules
SET
    workflow_type = $2,
    schedule_id = $3
WHERE id = $1
RETURNING id, related_to, workflow_type, schedule_id, created_at
`

type UpdateWorkflowScheduleParams struct {
	ID           uuid.UUID `json:"id"`
	WorkflowType string    `json:"workflow_type"`
	ScheduleID   string    `json:"schedule_id"`
}

func (q *Queries) UpdateWorkflowSchedule(ctx context.Context, arg UpdateWorkflowScheduleParams) (WorkflowsSchedule, error) {
	row := q.db.QueryRow(ctx, updateWorkflowSchedule, arg.ID, arg.WorkflowType, arg.ScheduleID)
	var i WorkflowsSchedule
	err := row.Scan(
		&i.ID,
		&i.RelatedTo,
		&i.WorkflowType,
		&i.ScheduleID,
		&i.CreatedAt,
	)
	return i, err
}

const workflowScheduleExists = `-- name: WorkflowScheduleExists :one
SELECT EXISTS(
    SELECT 1 FROM workflows_schedules
    WHERE related_to = $1 AND workflow_type = $2
)
`

type WorkflowScheduleExistsParams struct {
	RelatedTo    *string `json:"related_to"`
	WorkflowType string  `json:"workflow_type"`
}

func (q *Queries) WorkflowScheduleExists(ctx context.Context, arg WorkflowScheduleExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, workflowScheduleExists, arg.RelatedTo, arg.WorkflowType)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
