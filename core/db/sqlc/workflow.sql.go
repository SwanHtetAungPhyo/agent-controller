// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflow.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserWorkflow = `-- name: CreateUserWorkflow :one
INSERT INTO kainos_user_workflow (id, workflow_id, customer_id, meta_data, status) VALUES ($1,$2, $3, $4, $5) returning id, workflow_id, customer_id, meta_data, cron_time, status, created_at, updated_at
`

type CreateUserWorkflowParams struct {
	ID         uuid.UUID   `json:"id"`
	WorkflowID uuid.UUID   `json:"workflow_id"`
	CustomerID interface{} `json:"customer_id"`
	MetaData   []byte      `json:"meta_data"`
	Status     *string     `json:"status"`
}

func (q *Queries) CreateUserWorkflow(ctx context.Context, arg CreateUserWorkflowParams) (KainosUserWorkflow, error) {
	row := q.db.QueryRow(ctx, createUserWorkflow,
		arg.ID,
		arg.WorkflowID,
		arg.CustomerID,
		arg.MetaData,
		arg.Status,
	)
	var i KainosUserWorkflow
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.CustomerID,
		&i.MetaData,
		&i.CronTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWorkflow = `-- name: CreateWorkflow :one

INSERT INTO kainos_workflow (id, workflow_name, workflow_description, price) VALUES ($1,$2, $3, $4) returning id, workflow_name, workflow_description, created_at, deleted_at, updated_at, price
`

type CreateWorkflowParams struct {
	ID                  uuid.UUID `json:"id"`
	WorkflowName        string    `json:"workflow_name"`
	WorkflowDescription string    `json:"workflow_description"`
	Price               *float64  `json:"price"`
}

// -- name: CreateWorkflowSchedule :one
// INSERT INTO workflows_schedules (
//
//	id,
//	related_to,
//	workflow_type,
//	schedule_id,
//	created_at
//
// ) VALUES (
//
//	    $1, $2, $3, $4, $5
//	) RETURNING *;
//
// -- name: GetWorkflowSchedule :one
// SELECT * FROM workflows_schedules
// WHERE id = $1 LIMIT 1;
//
// -- name: GetWorkflowScheduleByScheduleID :one
// SELECT * FROM workflows_schedules
// WHERE schedule_id = $1 LIMIT 1;
//
// -- name: ListWorkflowSchedulesByUser :many
// SELECT * FROM workflows_schedules
// WHERE related_to = $1
// ORDER BY created_at DESC;
//
// -- name: ListWorkflowSchedulesByUserAndType :many
// SELECT * FROM workflows_schedules
// WHERE related_to = $1 AND workflow_type = $2
// ORDER BY created_at DESC;
//
// -- name: GetUserWorkflowSchedule :one
// SELECT * FROM workflows_schedules
// WHERE related_to = $1 AND workflow_type = $2
// LIMIT 1;
//
// -- name: UpdateWorkflowSchedule :one
// UPDATE workflows_schedules
// SET
//
//	workflow_type = $2,
//	schedule_id = $3
//
// WHERE id = $1
// RETURNING *;
//
// -- name: DeleteWorkflowSchedule :exec
// DELETE FROM workflows_schedules
// WHERE id = $1;
//
// -- name: DeleteWorkflowScheduleByScheduleID :exec
// DELETE FROM workflows_schedules
// WHERE schedule_id = $1;
//
// -- name: DeleteUserWorkflowSchedules :exec
// DELETE FROM workflows_schedules
// WHERE related_to = $1;
//
// -- name: DeleteUserWorkflowScheduleByType :exec
// DELETE FROM workflows_schedules
// WHERE related_to = $1 AND workflow_type = $2;
//
// -- name: ListAllWorkflowSchedules :many
// SELECT * FROM workflows_schedules
// ORDER BY created_at DESC;
//
// -- name: CountUserWorkflowSchedules :one
// SELECT COUNT(*) FROM workflows_schedules
// WHERE related_to = $1;
//
// -- name: WorkflowScheduleExists :one
// SELECT EXISTS(
//
//	SELECT 1 FROM workflows_schedules
//	WHERE related_to = $1 AND workflow_type = $2
//
// );
func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (KainosWorkflow, error) {
	row := q.db.QueryRow(ctx, createWorkflow,
		arg.ID,
		arg.WorkflowName,
		arg.WorkflowDescription,
		arg.Price,
	)
	var i KainosWorkflow
	err := row.Scan(
		&i.ID,
		&i.WorkflowName,
		&i.WorkflowDescription,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.Price,
	)
	return i, err
}

const getUserWorkflow = `-- name: GetUserWorkflow :many
SELECT workflow_id, workflow_name, meta_data, cron_time, status, kainos_user_workflow.created_at, kainos_user_workflow.updated_at
from kainos_user_workflow
         join kainos_workflow
              on kainos_user_workflow.workflow_id = kainos_workflow.id
         join kainos_user
              on kainos_user_workflow.customer_id = kainos_user.id
`

type GetUserWorkflowRow struct {
	WorkflowID   uuid.UUID        `json:"workflow_id"`
	WorkflowName string           `json:"workflow_name"`
	MetaData     []byte           `json:"meta_data"`
	CronTime     *string          `json:"cron_time"`
	Status       *string          `json:"status"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserWorkflow(ctx context.Context) ([]GetUserWorkflowRow, error) {
	rows, err := q.db.Query(ctx, getUserWorkflow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWorkflowRow{}
	for rows.Next() {
		var i GetUserWorkflowRow
		if err := rows.Scan(
			&i.WorkflowID,
			&i.WorkflowName,
			&i.MetaData,
			&i.CronTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkflow = `-- name: GetWorkflow :many
SELECT id, workflow_name, workflow_description, created_at, deleted_at, updated_at, price from kainos_workflow
`

func (q *Queries) GetWorkflow(ctx context.Context) ([]KainosWorkflow, error) {
	rows, err := q.db.Query(ctx, getWorkflow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []KainosWorkflow{}
	for rows.Next() {
		var i KainosWorkflow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowName,
			&i.WorkflowDescription,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.UpdatedAt,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
